package com.icpay.payment.batch.task.daily;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;

import com.icpay.payment.batch.task.BatchTaskTemplate;
import com.icpay.payment.common.constants.Constant;
import com.icpay.payment.common.data.dao.ChnlMchntAccountInfoMapper;
import com.icpay.payment.common.data.dao.MerAccountInfoMapper;
import com.icpay.payment.common.data.model.ChnlMchntAccountInfo;
import com.icpay.payment.common.data.model.MerAccountInfo;
import com.icpay.payment.common.data.svc.DAO;
import com.icpay.payment.common.data.utils.TxnDataUtils;
import com.icpay.payment.common.utils.Utils;
import com.icpay.payment.proxy.ServiceProxy;
import com.icpay.payment.service.ChnlMerAccService;
import com.icpay.payment.service.MerParams;

@Component("dailyResetTask")
public class DailyResetTask extends BatchTaskTemplate {
	
	protected boolean shouldRunTask(String targetTime) {
		String timeErr = MerParams.getParam("00",Consts.DEFAULT_MER, Consts.CAT_DAILY_RESET ,Consts.PNAME_TIME_ERR, "300");
		boolean r=false;
		try {
			r = Utils.isTimeEqualNow(targetTime, Integer.parseInt(timeErr));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return r;
	}
	
	@Override
	protected void doTask() {
		String taskTime = MerParams.getParam("00",Consts.DEFAULT_MER, Consts.CAT_DAILY_RESET , Consts.PNAME_TASK_TIME, "235000");
		if (! this.shouldRunTask(taskTime)) return ;
		
		resetForMerAccount();
		resetForChnlAccount();
		
	}

	protected void resetForMerAccount() {
		MerAccountInfoMapper dao = DAO.getMerAccountInfoMapper();
		List<MerAccountInfo> list = dao.selectByExample(null);
		
		if ((list==null) || (list.size()==0)) {
			debug("无任何商户符合重置条件!");
			return;
		}
		
		for(MerAccountInfo mer: list) {
			String chnlId = "00";
			String mchnt = ""+mer.getMchntCd();
			String opType = Constant.OPERTYPE._90 ;
			String memo = String.format("商戶: %s, 重置日累计额, 操作: %s", mchnt, opType);
			String taskResult="2";
			try {
				this.chnlMerAccService().adjust(chnlId, mchnt, opType, "1", this.getTaskNm(), memo);
				taskResult="1";
			} catch (Exception e) {
				taskResult="2";
				error(e, "重置归零作业失败! 商戶:%s, 重置日累计额, 操作:%s", mchnt, opType);
			}
		}
	}
	
	protected void resetForChnlAccount() {
		ChnlMchntAccountInfoMapper dao = DAO.getChnlMchntAccountInfoMapper();
		List<ChnlMchntAccountInfo>  list = dao.selectByExample(null);
		
		if ((list==null) || (list.size()==0)) {
			debug("无任何渠道商户符合重置条件!");
			return;
		}
		
		for(ChnlMchntAccountInfo mer: list) {
			String chnlId = mer.getChnlId();
			String mchnt = ""+mer.getMchntCd();
			String opType = Constant.OPERTYPE._90 ;
			String memo = String.format("商戶: %s-%s, 重置日累计额, 操作: %s", chnlId, mchnt, opType);
			String taskResult="2";
			try {
				this.chnlMerAccService().adjust(chnlId, mchnt, opType, "0", this.getTaskNm(), memo);
				taskResult="1";
			} catch (Exception e) {
				taskResult="2";
				error(e, "重置归零作业失败! 商戶:%s-%s, 重置日累计额, 操作:%s",chnlId,  mchnt, opType);
			}
		}
	}
	
	@Override
	protected String getTaskNm() {
		return "重置商户日累计额";
	}
	
	ChnlMerAccService cmas=null;
	protected ChnlMerAccService chnlMerAccService(){
		if(cmas==null){
			cmas=ServiceProxy.getService(ChnlMerAccService.class);
		}
		return cmas;
	}	
}
