package com.icpay.payment.db.dao.mybatis.model;

import java.io.Serializable;
import java.util.Date;

/**
 * [Model class] 
 *
 * This class was generated by MyBatis Generator.
 * Database table : tbl_risk_threshold

 *
 * @mbg.generated
 */
public class RiskThreshold implements Serializable {
    /**
     * 规则编号
     * Database column : tbl_risk_threshold.rule_id
     *
     * @mbg.generated
     */
    private Long ruleId;

    /**
     * 规则名称
     * Database column : tbl_risk_threshold.rule_nm
     *
     * @mbg.generated
     */
    private String ruleNm;

    /**
     * 规则类型：01=额度规则，02=频率(笔数)规则
     * Database column : tbl_risk_threshold.rule_tp
     *
     * @mbg.generated
     */
    private String ruleTp;

    /**
     * 风险类型：01=洗钱，02=套现，03=欺诈，04=恶意投诉，99=其他
     * Database column : tbl_risk_threshold.risk_tp
     *
     * @mbg.generated
     */
    private String riskTp;

    /**
     * 统计区间，单位：分钟
     * Database column : tbl_risk_threshold.period
     *
     * @mbg.generated
     */
    private Integer period;

    /**
     * 阀值/门槛值(发生达几次或达某个额度)
     * Database column : tbl_risk_threshold.threhold
     *
     * @mbg.generated
     */
    private Long threhold;

    /**
     * 上限阀值/门槛值(此设定大于threhold值时表示阀值为区间值)
     * Database column : tbl_risk_threshold.threhold_max
     *
     * @mbg.generated
     */
    private Long threholdMax;

    /**
     * 处理方式：0=记录+拒绝，1=仅记录，2=记录+警告
     * Database column : tbl_risk_threshold.result
     *
     * @mbg.generated
     */
    private String result;

    /**
     * 是否自动重置计数器: 0=否,1=是
     * Database column : tbl_risk_threshold.auto_reset
     *
     * @mbg.generated
     */
    private String autoReset;

    /**
     * 效期
     * Database column : tbl_risk_threshold.expired_tm
     *
     * @mbg.generated
     */
    private Date expiredTm;

    /**
     * 状态：1=有效，2=禁用，0=未生效
     * Database column : tbl_risk_threshold.status
     *
     * @mbg.generated
     */
    private String status;

    /**
     * 过滤卡号
     * Database column : tbl_risk_threshold.pri_acct_no
     *
     * @mbg.generated
     */
    private String priAcctNo;

    /**
     * 过滤会员编号
     * Database column : tbl_risk_threshold.user_id
     *
     * @mbg.generated
     */
    private String userId;

    /**
     * 过滤交易类(暂不使用，请改用 txn_type与 txn_sub_type)
     * Database column : tbl_risk_threshold.int_trans_cd
     *
     * @mbg.generated
     */
    private String intTransCd;

    /**
     * 过滤交易类(2位数)
     * Database column : tbl_risk_threshold.txn_type
     *
     * @mbg.generated
     */
    private String txnType;

    /**
     * 过滤交易子类(2位数)
     * Database column : tbl_risk_threshold.txn_sub_type
     *
     * @mbg.generated
     */
    private String txnSubType;

    /**
     * (暂不使用)
     * Database column : tbl_risk_threshold.pay_type
     *
     * @mbg.generated
     */
    private String payType;

    /**
     * 过滤电话号
     * Database column : tbl_risk_threshold.phone_no
     *
     * @mbg.generated
     */
    private String phoneNo;

    /**
     * 过滤商户号
     * Database column : tbl_risk_threshold.mchnt_cd
     *
     * @mbg.generated
     */
    private String mchntCd;

    /**
     * 过滤IP
     * Database column : tbl_risk_threshold.ip
     *
     * @mbg.generated
     */
    private String ip;

    /**
     * (暂不使用)
     * Database column : tbl_risk_threshold.term_sn
     *
     * @mbg.generated
     */
    private String termSn;

    /**
     * 过滤交易状态(支付或代付状态)，请参考 com.icpay.payment.common.constants.Constant.TXNS_TATUS
     * Database column : tbl_risk_threshold.txn_state
     *
     * @mbg.generated
     */
    private String txnState;

    /**
     * 过滤响应码
     * Database column : tbl_risk_threshold.resp_code
     *
     * @mbg.generated
     */
    private String respCode;

    /**
     * 过滤渠道编号
     * Database column : tbl_risk_threshold.trans_chhl
     *
     * @mbg.generated
     */
    private String transChhl;

    /**
     * 过滤渠道响应码
     * Database column : tbl_risk_threshold.chnl_resp_code
     *
     * @mbg.generated
     */
    private String chnlRespCode;

    /**
     * 过滤 Exception Class Name
     * Database column : tbl_risk_threshold.exception_cls_name
     *
     * @mbg.generated
     */
    private String exceptionClsName;

    /**
     * 备注
     * Database column : tbl_risk_threshold.comment
     *
     * @mbg.generated
     */
    private String comment;

    /**
     * 操作员
     * Database column : tbl_risk_threshold.last_oper_id
     *
     * @mbg.generated
     */
    private String lastOperId;

    /**
     * Database column : tbl_risk_threshold.rec_crt_ts
     *
     * @mbg.generated
     */
    private Date recCrtTs;

    /**
     * Database column : tbl_risk_threshold.rec_upd_ts
     *
     * @mbg.generated
     */
    private Date recUpdTs;

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    public RiskThreshold(Long ruleId, String ruleNm, String ruleTp, String riskTp, Integer period, Long threhold, Long threholdMax, String result, String autoReset, Date expiredTm, String status, String priAcctNo, String userId, String intTransCd, String txnType, String txnSubType, String payType, String phoneNo, String mchntCd, String ip, String termSn, String txnState, String respCode, String transChhl, String chnlRespCode, String exceptionClsName, String comment, String lastOperId, Date recCrtTs, Date recUpdTs) {
        this.ruleId = ruleId;
        this.ruleNm = ruleNm;
        this.ruleTp = ruleTp;
        this.riskTp = riskTp;
        this.period = period;
        this.threhold = threhold;
        this.threholdMax = threholdMax;
        this.result = result;
        this.autoReset = autoReset;
        this.expiredTm = expiredTm;
        this.status = status;
        this.priAcctNo = priAcctNo;
        this.userId = userId;
        this.intTransCd = intTransCd;
        this.txnType = txnType;
        this.txnSubType = txnSubType;
        this.payType = payType;
        this.phoneNo = phoneNo;
        this.mchntCd = mchntCd;
        this.ip = ip;
        this.termSn = termSn;
        this.txnState = txnState;
        this.respCode = respCode;
        this.transChhl = transChhl;
        this.chnlRespCode = chnlRespCode;
        this.exceptionClsName = exceptionClsName;
        this.comment = comment;
        this.lastOperId = lastOperId;
        this.recCrtTs = recCrtTs;
        this.recUpdTs = recUpdTs;
    }

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    public RiskThreshold() {
        super();
    }

    /**
     * 规则编号
     * @return rule_id 规则编号
     *
     * @mbg.generated
     */
    public Long getRuleId() {
        return ruleId;
    }

    /**
     * 规则编号
     * @param ruleId 规则编号
     *
     * @mbg.generated
     */
    public void setRuleId(Long ruleId) {
        this.ruleId = ruleId;
    }

    /**
     * 规则名称
     * @return rule_nm 规则名称
     *
     * @mbg.generated
     */
    public String getRuleNm() {
        return ruleNm;
    }

    /**
     * 规则名称
     * @param ruleNm 规则名称
     *
     * @mbg.generated
     */
    public void setRuleNm(String ruleNm) {
        this.ruleNm = ruleNm;
    }

    /**
     * 规则类型：01=额度规则，02=频率(笔数)规则
     * @return rule_tp 规则类型：01=额度规则，02=频率(笔数)规则
     *
     * @mbg.generated
     */
    public String getRuleTp() {
        return ruleTp;
    }

    /**
     * 规则类型：01=额度规则，02=频率(笔数)规则
     * @param ruleTp 规则类型：01=额度规则，02=频率(笔数)规则
     *
     * @mbg.generated
     */
    public void setRuleTp(String ruleTp) {
        this.ruleTp = ruleTp;
    }

    /**
     * 风险类型：01=洗钱，02=套现，03=欺诈，04=恶意投诉，99=其他
     * @return risk_tp 风险类型：01=洗钱，02=套现，03=欺诈，04=恶意投诉，99=其他
     *
     * @mbg.generated
     */
    public String getRiskTp() {
        return riskTp;
    }

    /**
     * 风险类型：01=洗钱，02=套现，03=欺诈，04=恶意投诉，99=其他
     * @param riskTp 风险类型：01=洗钱，02=套现，03=欺诈，04=恶意投诉，99=其他
     *
     * @mbg.generated
     */
    public void setRiskTp(String riskTp) {
        this.riskTp = riskTp;
    }

    /**
     * 统计区间，单位：分钟
     * @return period 统计区间，单位：分钟
     *
     * @mbg.generated
     */
    public Integer getPeriod() {
        return period;
    }

    /**
     * 统计区间，单位：分钟
     * @param period 统计区间，单位：分钟
     *
     * @mbg.generated
     */
    public void setPeriod(Integer period) {
        this.period = period;
    }

    /**
     * 阀值/门槛值(发生达几次或达某个额度)
     * @return threhold 阀值/门槛值(发生达几次或达某个额度)
     *
     * @mbg.generated
     */
    public Long getThrehold() {
        return threhold;
    }

    /**
     * 阀值/门槛值(发生达几次或达某个额度)
     * @param threhold 阀值/门槛值(发生达几次或达某个额度)
     *
     * @mbg.generated
     */
    public void setThrehold(Long threhold) {
        this.threhold = threhold;
    }

    /**
     * 上限阀值/门槛值(此设定大于threhold值时表示阀值为区间值)
     * @return threhold_max 上限阀值/门槛值(此设定大于threhold值时表示阀值为区间值)
     *
     * @mbg.generated
     */
    public Long getThreholdMax() {
        return threholdMax;
    }

    /**
     * 上限阀值/门槛值(此设定大于threhold值时表示阀值为区间值)
     * @param threholdMax 上限阀值/门槛值(此设定大于threhold值时表示阀值为区间值)
     *
     * @mbg.generated
     */
    public void setThreholdMax(Long threholdMax) {
        this.threholdMax = threholdMax;
    }

    /**
     * 处理方式：0=记录+拒绝，1=仅记录，2=记录+警告
     * @return result 处理方式：0=记录+拒绝，1=仅记录，2=记录+警告
     *
     * @mbg.generated
     */
    public String getResult() {
        return result;
    }

    /**
     * 处理方式：0=记录+拒绝，1=仅记录，2=记录+警告
     * @param result 处理方式：0=记录+拒绝，1=仅记录，2=记录+警告
     *
     * @mbg.generated
     */
    public void setResult(String result) {
        this.result = result;
    }

    /**
     * 是否自动重置计数器: 0=否,1=是
     * @return auto_reset 是否自动重置计数器: 0=否,1=是
     *
     * @mbg.generated
     */
    public String getAutoReset() {
        return autoReset;
    }

    /**
     * 是否自动重置计数器: 0=否,1=是
     * @param autoReset 是否自动重置计数器: 0=否,1=是
     *
     * @mbg.generated
     */
    public void setAutoReset(String autoReset) {
        this.autoReset = autoReset;
    }

    /**
     * 效期
     * @return expired_tm 效期
     *
     * @mbg.generated
     */
    public Date getExpiredTm() {
        return expiredTm;
    }

    /**
     * 效期
     * @param expiredTm 效期
     *
     * @mbg.generated
     */
    public void setExpiredTm(Date expiredTm) {
        this.expiredTm = expiredTm;
    }

    /**
     * 状态：1=有效，2=禁用，0=未生效
     * @return status 状态：1=有效，2=禁用，0=未生效
     *
     * @mbg.generated
     */
    public String getStatus() {
        return status;
    }

    /**
     * 状态：1=有效，2=禁用，0=未生效
     * @param status 状态：1=有效，2=禁用，0=未生效
     *
     * @mbg.generated
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * 过滤卡号
     * @return pri_acct_no 过滤卡号
     *
     * @mbg.generated
     */
    public String getPriAcctNo() {
        return priAcctNo;
    }

    /**
     * 过滤卡号
     * @param priAcctNo 过滤卡号
     *
     * @mbg.generated
     */
    public void setPriAcctNo(String priAcctNo) {
        this.priAcctNo = priAcctNo;
    }

    /**
     * 过滤会员编号
     * @return user_id 过滤会员编号
     *
     * @mbg.generated
     */
    public String getUserId() {
        return userId;
    }

    /**
     * 过滤会员编号
     * @param userId 过滤会员编号
     *
     * @mbg.generated
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * 过滤交易类(暂不使用，请改用 txn_type与 txn_sub_type)
     * @return int_trans_cd 过滤交易类(暂不使用，请改用 txn_type与 txn_sub_type)
     *
     * @mbg.generated
     */
    public String getIntTransCd() {
        return intTransCd;
    }

    /**
     * 过滤交易类(暂不使用，请改用 txn_type与 txn_sub_type)
     * @param intTransCd 过滤交易类(暂不使用，请改用 txn_type与 txn_sub_type)
     *
     * @mbg.generated
     */
    public void setIntTransCd(String intTransCd) {
        this.intTransCd = intTransCd;
    }

    /**
     * 过滤交易类(2位数)
     * @return txn_type 过滤交易类(2位数)
     *
     * @mbg.generated
     */
    public String getTxnType() {
        return txnType;
    }

    /**
     * 过滤交易类(2位数)
     * @param txnType 过滤交易类(2位数)
     *
     * @mbg.generated
     */
    public void setTxnType(String txnType) {
        this.txnType = txnType;
    }

    /**
     * 过滤交易子类(2位数)
     * @return txn_sub_type 过滤交易子类(2位数)
     *
     * @mbg.generated
     */
    public String getTxnSubType() {
        return txnSubType;
    }

    /**
     * 过滤交易子类(2位数)
     * @param txnSubType 过滤交易子类(2位数)
     *
     * @mbg.generated
     */
    public void setTxnSubType(String txnSubType) {
        this.txnSubType = txnSubType;
    }

    /**
     * (暂不使用)
     * @return pay_type (暂不使用)
     *
     * @mbg.generated
     */
    public String getPayType() {
        return payType;
    }

    /**
     * (暂不使用)
     * @param payType (暂不使用)
     *
     * @mbg.generated
     */
    public void setPayType(String payType) {
        this.payType = payType;
    }

    /**
     * 过滤电话号
     * @return phone_no 过滤电话号
     *
     * @mbg.generated
     */
    public String getPhoneNo() {
        return phoneNo;
    }

    /**
     * 过滤电话号
     * @param phoneNo 过滤电话号
     *
     * @mbg.generated
     */
    public void setPhoneNo(String phoneNo) {
        this.phoneNo = phoneNo;
    }

    /**
     * 过滤商户号
     * @return mchnt_cd 过滤商户号
     *
     * @mbg.generated
     */
    public String getMchntCd() {
        return mchntCd;
    }

    /**
     * 过滤商户号
     * @param mchntCd 过滤商户号
     *
     * @mbg.generated
     */
    public void setMchntCd(String mchntCd) {
        this.mchntCd = mchntCd;
    }

    /**
     * 过滤IP
     * @return ip 过滤IP
     *
     * @mbg.generated
     */
    public String getIp() {
        return ip;
    }

    /**
     * 过滤IP
     * @param ip 过滤IP
     *
     * @mbg.generated
     */
    public void setIp(String ip) {
        this.ip = ip;
    }

    /**
     * (暂不使用)
     * @return term_sn (暂不使用)
     *
     * @mbg.generated
     */
    public String getTermSn() {
        return termSn;
    }

    /**
     * (暂不使用)
     * @param termSn (暂不使用)
     *
     * @mbg.generated
     */
    public void setTermSn(String termSn) {
        this.termSn = termSn;
    }

    /**
     * 过滤交易状态(支付或代付状态)，请参考 com.icpay.payment.common.constants.Constant.TXNS_TATUS
     * @return txn_state 过滤交易状态(支付或代付状态)，请参考 com.icpay.payment.common.constants.Constant.TXNS_TATUS
     *
     * @mbg.generated
     */
    public String getTxnState() {
        return txnState;
    }

    /**
     * 过滤交易状态(支付或代付状态)，请参考 com.icpay.payment.common.constants.Constant.TXNS_TATUS
     * @param txnState 过滤交易状态(支付或代付状态)，请参考 com.icpay.payment.common.constants.Constant.TXNS_TATUS
     *
     * @mbg.generated
     */
    public void setTxnState(String txnState) {
        this.txnState = txnState;
    }

    /**
     * 过滤响应码
     * @return resp_code 过滤响应码
     *
     * @mbg.generated
     */
    public String getRespCode() {
        return respCode;
    }

    /**
     * 过滤响应码
     * @param respCode 过滤响应码
     *
     * @mbg.generated
     */
    public void setRespCode(String respCode) {
        this.respCode = respCode;
    }

    /**
     * 过滤渠道编号
     * @return trans_chhl 过滤渠道编号
     *
     * @mbg.generated
     */
    public String getTransChhl() {
        return transChhl;
    }

    /**
     * 过滤渠道编号
     * @param transChhl 过滤渠道编号
     *
     * @mbg.generated
     */
    public void setTransChhl(String transChhl) {
        this.transChhl = transChhl;
    }

    /**
     * 过滤渠道响应码
     * @return chnl_resp_code 过滤渠道响应码
     *
     * @mbg.generated
     */
    public String getChnlRespCode() {
        return chnlRespCode;
    }

    /**
     * 过滤渠道响应码
     * @param chnlRespCode 过滤渠道响应码
     *
     * @mbg.generated
     */
    public void setChnlRespCode(String chnlRespCode) {
        this.chnlRespCode = chnlRespCode;
    }

    /**
     * 过滤 Exception Class Name
     * @return exception_cls_name 过滤 Exception Class Name
     *
     * @mbg.generated
     */
    public String getExceptionClsName() {
        return exceptionClsName;
    }

    /**
     * 过滤 Exception Class Name
     * @param exceptionClsName 过滤 Exception Class Name
     *
     * @mbg.generated
     */
    public void setExceptionClsName(String exceptionClsName) {
        this.exceptionClsName = exceptionClsName;
    }

    /**
     * 备注
     * @return comment 备注
     *
     * @mbg.generated
     */
    public String getComment() {
        return comment;
    }

    /**
     * 备注
     * @param comment 备注
     *
     * @mbg.generated
     */
    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * 操作员
     * @return last_oper_id 操作员
     *
     * @mbg.generated
     */
    public String getLastOperId() {
        return lastOperId;
    }

    /**
     * 操作员
     * @param lastOperId 操作员
     *
     * @mbg.generated
     */
    public void setLastOperId(String lastOperId) {
        this.lastOperId = lastOperId;
    }

    /**
     * @return rec_crt_ts 
     *
     * @mbg.generated
     */
    public Date getRecCrtTs() {
        return recCrtTs;
    }

    /**
     * @param recCrtTs 
     *
     * @mbg.generated
     */
    public void setRecCrtTs(Date recCrtTs) {
        this.recCrtTs = recCrtTs;
    }

    /**
     * @return rec_upd_ts 
     *
     * @mbg.generated
     */
    public Date getRecUpdTs() {
        return recUpdTs;
    }

    /**
     * @param recUpdTs 
     *
     * @mbg.generated
     */
    public void setRecUpdTs(Date recUpdTs) {
        this.recUpdTs = recUpdTs;
    }

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        RiskThreshold other = (RiskThreshold) that;
        return (this.getRuleId() == null ? other.getRuleId() == null : this.getRuleId().equals(other.getRuleId()))
            && (this.getRuleNm() == null ? other.getRuleNm() == null : this.getRuleNm().equals(other.getRuleNm()))
            && (this.getRuleTp() == null ? other.getRuleTp() == null : this.getRuleTp().equals(other.getRuleTp()))
            && (this.getRiskTp() == null ? other.getRiskTp() == null : this.getRiskTp().equals(other.getRiskTp()))
            && (this.getPeriod() == null ? other.getPeriod() == null : this.getPeriod().equals(other.getPeriod()))
            && (this.getThrehold() == null ? other.getThrehold() == null : this.getThrehold().equals(other.getThrehold()))
            && (this.getThreholdMax() == null ? other.getThreholdMax() == null : this.getThreholdMax().equals(other.getThreholdMax()))
            && (this.getResult() == null ? other.getResult() == null : this.getResult().equals(other.getResult()))
            && (this.getAutoReset() == null ? other.getAutoReset() == null : this.getAutoReset().equals(other.getAutoReset()))
            && (this.getExpiredTm() == null ? other.getExpiredTm() == null : this.getExpiredTm().equals(other.getExpiredTm()))
            && (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()))
            && (this.getPriAcctNo() == null ? other.getPriAcctNo() == null : this.getPriAcctNo().equals(other.getPriAcctNo()))
            && (this.getUserId() == null ? other.getUserId() == null : this.getUserId().equals(other.getUserId()))
            && (this.getIntTransCd() == null ? other.getIntTransCd() == null : this.getIntTransCd().equals(other.getIntTransCd()))
            && (this.getTxnType() == null ? other.getTxnType() == null : this.getTxnType().equals(other.getTxnType()))
            && (this.getTxnSubType() == null ? other.getTxnSubType() == null : this.getTxnSubType().equals(other.getTxnSubType()))
            && (this.getPayType() == null ? other.getPayType() == null : this.getPayType().equals(other.getPayType()))
            && (this.getPhoneNo() == null ? other.getPhoneNo() == null : this.getPhoneNo().equals(other.getPhoneNo()))
            && (this.getMchntCd() == null ? other.getMchntCd() == null : this.getMchntCd().equals(other.getMchntCd()))
            && (this.getIp() == null ? other.getIp() == null : this.getIp().equals(other.getIp()))
            && (this.getTermSn() == null ? other.getTermSn() == null : this.getTermSn().equals(other.getTermSn()))
            && (this.getTxnState() == null ? other.getTxnState() == null : this.getTxnState().equals(other.getTxnState()))
            && (this.getRespCode() == null ? other.getRespCode() == null : this.getRespCode().equals(other.getRespCode()))
            && (this.getTransChhl() == null ? other.getTransChhl() == null : this.getTransChhl().equals(other.getTransChhl()))
            && (this.getChnlRespCode() == null ? other.getChnlRespCode() == null : this.getChnlRespCode().equals(other.getChnlRespCode()))
            && (this.getExceptionClsName() == null ? other.getExceptionClsName() == null : this.getExceptionClsName().equals(other.getExceptionClsName()))
            && (this.getComment() == null ? other.getComment() == null : this.getComment().equals(other.getComment()))
            && (this.getLastOperId() == null ? other.getLastOperId() == null : this.getLastOperId().equals(other.getLastOperId()))
            && (this.getRecCrtTs() == null ? other.getRecCrtTs() == null : this.getRecCrtTs().equals(other.getRecCrtTs()))
            && (this.getRecUpdTs() == null ? other.getRecUpdTs() == null : this.getRecUpdTs().equals(other.getRecUpdTs()));
    }

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getRuleId() == null) ? 0 : getRuleId().hashCode());
        result = prime * result + ((getRuleNm() == null) ? 0 : getRuleNm().hashCode());
        result = prime * result + ((getRuleTp() == null) ? 0 : getRuleTp().hashCode());
        result = prime * result + ((getRiskTp() == null) ? 0 : getRiskTp().hashCode());
        result = prime * result + ((getPeriod() == null) ? 0 : getPeriod().hashCode());
        result = prime * result + ((getThrehold() == null) ? 0 : getThrehold().hashCode());
        result = prime * result + ((getThreholdMax() == null) ? 0 : getThreholdMax().hashCode());
        result = prime * result + ((getResult() == null) ? 0 : getResult().hashCode());
        result = prime * result + ((getAutoReset() == null) ? 0 : getAutoReset().hashCode());
        result = prime * result + ((getExpiredTm() == null) ? 0 : getExpiredTm().hashCode());
        result = prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());
        result = prime * result + ((getPriAcctNo() == null) ? 0 : getPriAcctNo().hashCode());
        result = prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());
        result = prime * result + ((getIntTransCd() == null) ? 0 : getIntTransCd().hashCode());
        result = prime * result + ((getTxnType() == null) ? 0 : getTxnType().hashCode());
        result = prime * result + ((getTxnSubType() == null) ? 0 : getTxnSubType().hashCode());
        result = prime * result + ((getPayType() == null) ? 0 : getPayType().hashCode());
        result = prime * result + ((getPhoneNo() == null) ? 0 : getPhoneNo().hashCode());
        result = prime * result + ((getMchntCd() == null) ? 0 : getMchntCd().hashCode());
        result = prime * result + ((getIp() == null) ? 0 : getIp().hashCode());
        result = prime * result + ((getTermSn() == null) ? 0 : getTermSn().hashCode());
        result = prime * result + ((getTxnState() == null) ? 0 : getTxnState().hashCode());
        result = prime * result + ((getRespCode() == null) ? 0 : getRespCode().hashCode());
        result = prime * result + ((getTransChhl() == null) ? 0 : getTransChhl().hashCode());
        result = prime * result + ((getChnlRespCode() == null) ? 0 : getChnlRespCode().hashCode());
        result = prime * result + ((getExceptionClsName() == null) ? 0 : getExceptionClsName().hashCode());
        result = prime * result + ((getComment() == null) ? 0 : getComment().hashCode());
        result = prime * result + ((getLastOperId() == null) ? 0 : getLastOperId().hashCode());
        result = prime * result + ((getRecCrtTs() == null) ? 0 : getRecCrtTs().hashCode());
        result = prime * result + ((getRecUpdTs() == null) ? 0 : getRecUpdTs().hashCode());
        return result;
    }

    /**
     * Database table : tbl_risk_threshold
     *
     * @mbg.generated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash=").append(hashCode());
        sb.append(", ruleId=").append(ruleId);
        sb.append(", ruleNm=").append(ruleNm);
        sb.append(", ruleTp=").append(ruleTp);
        sb.append(", riskTp=").append(riskTp);
        sb.append(", period=").append(period);
        sb.append(", threhold=").append(threhold);
        sb.append(", threholdMax=").append(threholdMax);
        sb.append(", result=").append(result);
        sb.append(", autoReset=").append(autoReset);
        sb.append(", expiredTm=").append(expiredTm);
        sb.append(", status=").append(status);
        sb.append(", priAcctNo=").append(priAcctNo);
        sb.append(", userId=").append(userId);
        sb.append(", intTransCd=").append(intTransCd);
        sb.append(", txnType=").append(txnType);
        sb.append(", txnSubType=").append(txnSubType);
        sb.append(", payType=").append(payType);
        sb.append(", phoneNo=").append(phoneNo);
        sb.append(", mchntCd=").append(mchntCd);
        sb.append(", ip=").append(ip);
        sb.append(", termSn=").append(termSn);
        sb.append(", txnState=").append(txnState);
        sb.append(", respCode=").append(respCode);
        sb.append(", transChhl=").append(transChhl);
        sb.append(", chnlRespCode=").append(chnlRespCode);
        sb.append(", exceptionClsName=").append(exceptionClsName);
        sb.append(", comment=").append(comment);
        sb.append(", lastOperId=").append(lastOperId);
        sb.append(", recCrtTs=").append(recCrtTs);
        sb.append(", recUpdTs=").append(recUpdTs);
        sb.append("]");
        return sb.toString();
    }

    /**
     * Copy properties value from source.
     * @param source The instance that clone from.
     *
     * @mbg.generated
     */
    public void cloneFrom(RiskThreshold source) {
        this.ruleId=source.ruleId;
        this.ruleNm=source.ruleNm;
        this.ruleTp=source.ruleTp;
        this.riskTp=source.riskTp;
        this.period=source.period;
        this.threhold=source.threhold;
        this.threholdMax=source.threholdMax;
        this.result=source.result;
        this.autoReset=source.autoReset;
        this.expiredTm=source.expiredTm;
        this.status=source.status;
        this.priAcctNo=source.priAcctNo;
        this.userId=source.userId;
        this.intTransCd=source.intTransCd;
        this.txnType=source.txnType;
        this.txnSubType=source.txnSubType;
        this.payType=source.payType;
        this.phoneNo=source.phoneNo;
        this.mchntCd=source.mchntCd;
        this.ip=source.ip;
        this.termSn=source.termSn;
        this.txnState=source.txnState;
        this.respCode=source.respCode;
        this.transChhl=source.transChhl;
        this.chnlRespCode=source.chnlRespCode;
        this.exceptionClsName=source.exceptionClsName;
        this.comment=source.comment;
        this.lastOperId=source.lastOperId;
        this.recCrtTs=source.recCrtTs;
        this.recUpdTs=source.recUpdTs;
    }
}