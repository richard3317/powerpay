package com.icpay.payment.db.dao.mybatis.model;

import java.io.Serializable;

/**
 * [Model class] 
 *
 * This class was generated by MyBatis Generator.
 * Database table : view_txn_mer_acc_limit_info

 *
 * @mbg.generated
 */
public class TxnMerAccLimitInfo implements Serializable {
    /**
     * 商户编号小商编
     * Database column : view_txn_mer_acc_limit_info.mchnt_cd
     *
     * @mbg.generated
     */
    private String mchntCd;

    /**
     * 交易类型(报文类)
     * Database column : view_txn_mer_acc_limit_info.int_trans_cd
     *
     * @mbg.generated
     */
    private String intTransCd;

    /**
     * 计费模式，2=单笔固定扣率
     * Database column : view_txn_mer_acc_limit_info.settle_mode
     *
     * @mbg.generated
     */
    private String settleMode;

    /**
     * 手续费算法，Json格式，例如：{"maxFee":"1000","minFee":"10","fixRate":"0.0025"}或{"maxFee":"1000","fixRate":"0.0025"}等。
     * Database column : view_txn_mer_acc_limit_info.settle_algorithm
     *
     * @mbg.generated
     */
    private String settleAlgorithm;

    /**
     * T0垫资比例(如：'0.95','0.9','1.0'等)
     * Database column : view_txn_mer_acc_limit_info.tx_t0_percent
     *
     * @mbg.generated
     */
    private String txT0Percent;

    /**
     * 交易时段限制，例："ALL" 或 "0800-1200,1400-2000"
     * Database column : view_txn_mer_acc_limit_info.tx_time_limit
     *
     * @mbg.generated
     */
    private String txTimeLimit;

    /**
     * 单笔最低金额限制(单位：分)
     * Database column : view_txn_mer_acc_limit_info.tx_amt_min
     *
     * @mbg.generated
     */
    private String txAmtMin;

    /**
     * 单笔最大限额(单位：分)
     * Database column : view_txn_mer_acc_limit_info.tx_amt_max
     *
     * @mbg.generated
     */
    private String txAmtMax;

    /**
     * 当日交易累计限额(单位：分)
     * Database column : view_txn_mer_acc_limit_info.tx_day_max
     *
     * @mbg.generated
     */
    private String txDayMax;

    /**
     * 单卡当日累计限額(单位：分)
     * Database column : view_txn_mer_acc_limit_info.tx_card_day_max
     *
     * @mbg.generated
     */
    private String txCardDayMax;

    /**
     * 清算周期,0=T0,1=T1,2=T2,3=T3
     * Database column : view_txn_mer_acc_limit_info.settle_period
     *
     * @mbg.generated
     */
    private String settlePeriod;

    /**
     * 可代付馀额
     * Database column : view_txn_mer_acc_limit_info.available_balance
     *
     * @mbg.generated
     */
    private Long availableBalance;

    /**
     * 保留余额
     * Database column : view_txn_mer_acc_limit_info.obligated_balance
     *
     * @mbg.generated
     */
    private Long obligatedBalance;

    /**
     * 不可代付馀额(T1馀额)
     * Database column : view_txn_mer_acc_limit_info.frozen_t1_balance
     *
     * @mbg.generated
     */
    private Long frozenT1Balance;

    /**
     * 冻结款
     * Database column : view_txn_mer_acc_limit_info.frozen_balance
     *
     * @mbg.generated
     */
    private Long frozenBalance;

    /**
     * 状态：0=无效, 1=有效,2=锁定
     * Database column : view_txn_mer_acc_limit_info.acc_state
     *
     * @mbg.generated
     */
    private String accState;

    /**
     * 当日累计交易额(收入)
     * Database column : view_txn_mer_acc_limit_info.dayTxnAmt
     *
     * @mbg.generated
     */
    private Long daytxnamt;

    /**
     * 当日累计交易手续费
     * Database column : view_txn_mer_acc_limit_info.dayTxnFee
     *
     * @mbg.generated
     */
    private Long daytxnfee;

    /**
     * 当日累计交易笔数
     * Database column : view_txn_mer_acc_limit_info.dayTxnCount
     *
     * @mbg.generated
     */
    private Integer daytxncount;

    /**
     * 当日累计提现金额(支出)
     * Database column : view_txn_mer_acc_limit_info.dayWithdrawAmt
     *
     * @mbg.generated
     */
    private Long daywithdrawamt;

    /**
     * 当日累计提现手续费
     * Database column : view_txn_mer_acc_limit_info.dayWithdrawFee
     *
     * @mbg.generated
     */
    private Long daywithdrawfee;

    /**
     * 当日累计提现笔数
     * Database column : view_txn_mer_acc_limit_info.dayWithdrawCount
     *
     * @mbg.generated
     */
    private Integer daywithdrawcount;

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    public TxnMerAccLimitInfo(String mchntCd, String intTransCd, String settleMode, String settleAlgorithm, String txT0Percent, String txTimeLimit, String txAmtMin, String txAmtMax, String txDayMax, String txCardDayMax, String settlePeriod, Long availableBalance, Long obligatedBalance, Long frozenT1Balance, Long frozenBalance, String accState, Long daytxnamt, Long daytxnfee, Integer daytxncount, Long daywithdrawamt, Long daywithdrawfee, Integer daywithdrawcount) {
        this.mchntCd = mchntCd;
        this.intTransCd = intTransCd;
        this.settleMode = settleMode;
        this.settleAlgorithm = settleAlgorithm;
        this.txT0Percent = txT0Percent;
        this.txTimeLimit = txTimeLimit;
        this.txAmtMin = txAmtMin;
        this.txAmtMax = txAmtMax;
        this.txDayMax = txDayMax;
        this.txCardDayMax = txCardDayMax;
        this.settlePeriod = settlePeriod;
        this.availableBalance = availableBalance;
        this.obligatedBalance = obligatedBalance;
        this.frozenT1Balance = frozenT1Balance;
        this.frozenBalance = frozenBalance;
        this.accState = accState;
        this.daytxnamt = daytxnamt;
        this.daytxnfee = daytxnfee;
        this.daytxncount = daytxncount;
        this.daywithdrawamt = daywithdrawamt;
        this.daywithdrawfee = daywithdrawfee;
        this.daywithdrawcount = daywithdrawcount;
    }

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    public TxnMerAccLimitInfo() {
        super();
    }

    /**
     * 商户编号小商编
     * @return mchnt_cd 商户编号小商编
     *
     * @mbg.generated
     */
    public String getMchntCd() {
        return mchntCd;
    }

    /**
     * 商户编号小商编
     * @param mchntCd 商户编号小商编
     *
     * @mbg.generated
     */
    public void setMchntCd(String mchntCd) {
        this.mchntCd = mchntCd;
    }

    /**
     * 交易类型(报文类)
     * @return int_trans_cd 交易类型(报文类)
     *
     * @mbg.generated
     */
    public String getIntTransCd() {
        return intTransCd;
    }

    /**
     * 交易类型(报文类)
     * @param intTransCd 交易类型(报文类)
     *
     * @mbg.generated
     */
    public void setIntTransCd(String intTransCd) {
        this.intTransCd = intTransCd;
    }

    /**
     * 计费模式，2=单笔固定扣率
     * @return settle_mode 计费模式，2=单笔固定扣率
     *
     * @mbg.generated
     */
    public String getSettleMode() {
        return settleMode;
    }

    /**
     * 计费模式，2=单笔固定扣率
     * @param settleMode 计费模式，2=单笔固定扣率
     *
     * @mbg.generated
     */
    public void setSettleMode(String settleMode) {
        this.settleMode = settleMode;
    }

    /**
     * 手续费算法，Json格式，例如：{"maxFee":"1000","minFee":"10","fixRate":"0.0025"}或{"maxFee":"1000","fixRate":"0.0025"}等。
     * @return settle_algorithm 手续费算法，Json格式，例如：{"maxFee":"1000","minFee":"10","fixRate":"0.0025"}或{"maxFee":"1000","fixRate":"0.0025"}等。
     *
     * @mbg.generated
     */
    public String getSettleAlgorithm() {
        return settleAlgorithm;
    }

    /**
     * 手续费算法，Json格式，例如：{"maxFee":"1000","minFee":"10","fixRate":"0.0025"}或{"maxFee":"1000","fixRate":"0.0025"}等。
     * @param settleAlgorithm 手续费算法，Json格式，例如：{"maxFee":"1000","minFee":"10","fixRate":"0.0025"}或{"maxFee":"1000","fixRate":"0.0025"}等。
     *
     * @mbg.generated
     */
    public void setSettleAlgorithm(String settleAlgorithm) {
        this.settleAlgorithm = settleAlgorithm;
    }

    /**
     * T0垫资比例(如：'0.95','0.9','1.0'等)
     * @return tx_t0_percent T0垫资比例(如：'0.95','0.9','1.0'等)
     *
     * @mbg.generated
     */
    public String getTxT0Percent() {
        return txT0Percent;
    }

    /**
     * T0垫资比例(如：'0.95','0.9','1.0'等)
     * @param txT0Percent T0垫资比例(如：'0.95','0.9','1.0'等)
     *
     * @mbg.generated
     */
    public void setTxT0Percent(String txT0Percent) {
        this.txT0Percent = txT0Percent;
    }

    /**
     * 交易时段限制，例："ALL" 或 "0800-1200,1400-2000"
     * @return tx_time_limit 交易时段限制，例："ALL" 或 "0800-1200,1400-2000"
     *
     * @mbg.generated
     */
    public String getTxTimeLimit() {
        return txTimeLimit;
    }

    /**
     * 交易时段限制，例："ALL" 或 "0800-1200,1400-2000"
     * @param txTimeLimit 交易时段限制，例："ALL" 或 "0800-1200,1400-2000"
     *
     * @mbg.generated
     */
    public void setTxTimeLimit(String txTimeLimit) {
        this.txTimeLimit = txTimeLimit;
    }

    /**
     * 单笔最低金额限制(单位：分)
     * @return tx_amt_min 单笔最低金额限制(单位：分)
     *
     * @mbg.generated
     */
    public String getTxAmtMin() {
        return txAmtMin;
    }

    /**
     * 单笔最低金额限制(单位：分)
     * @param txAmtMin 单笔最低金额限制(单位：分)
     *
     * @mbg.generated
     */
    public void setTxAmtMin(String txAmtMin) {
        this.txAmtMin = txAmtMin;
    }

    /**
     * 单笔最大限额(单位：分)
     * @return tx_amt_max 单笔最大限额(单位：分)
     *
     * @mbg.generated
     */
    public String getTxAmtMax() {
        return txAmtMax;
    }

    /**
     * 单笔最大限额(单位：分)
     * @param txAmtMax 单笔最大限额(单位：分)
     *
     * @mbg.generated
     */
    public void setTxAmtMax(String txAmtMax) {
        this.txAmtMax = txAmtMax;
    }

    /**
     * 当日交易累计限额(单位：分)
     * @return tx_day_max 当日交易累计限额(单位：分)
     *
     * @mbg.generated
     */
    public String getTxDayMax() {
        return txDayMax;
    }

    /**
     * 当日交易累计限额(单位：分)
     * @param txDayMax 当日交易累计限额(单位：分)
     *
     * @mbg.generated
     */
    public void setTxDayMax(String txDayMax) {
        this.txDayMax = txDayMax;
    }

    /**
     * 单卡当日累计限額(单位：分)
     * @return tx_card_day_max 单卡当日累计限額(单位：分)
     *
     * @mbg.generated
     */
    public String getTxCardDayMax() {
        return txCardDayMax;
    }

    /**
     * 单卡当日累计限額(单位：分)
     * @param txCardDayMax 单卡当日累计限額(单位：分)
     *
     * @mbg.generated
     */
    public void setTxCardDayMax(String txCardDayMax) {
        this.txCardDayMax = txCardDayMax;
    }

    /**
     * 清算周期,0=T0,1=T1,2=T2,3=T3
     * @return settle_period 清算周期,0=T0,1=T1,2=T2,3=T3
     *
     * @mbg.generated
     */
    public String getSettlePeriod() {
        return settlePeriod;
    }

    /**
     * 清算周期,0=T0,1=T1,2=T2,3=T3
     * @param settlePeriod 清算周期,0=T0,1=T1,2=T2,3=T3
     *
     * @mbg.generated
     */
    public void setSettlePeriod(String settlePeriod) {
        this.settlePeriod = settlePeriod;
    }

    /**
     * 可代付馀额
     * @return available_balance 可代付馀额
     *
     * @mbg.generated
     */
    public Long getAvailableBalance() {
        return availableBalance;
    }

    /**
     * 可代付馀额
     * @param availableBalance 可代付馀额
     *
     * @mbg.generated
     */
    public void setAvailableBalance(Long availableBalance) {
        this.availableBalance = availableBalance;
    }

    /**
     * 保留余额
     * @return obligated_balance 保留余额
     *
     * @mbg.generated
     */
    public Long getObligatedBalance() {
        return obligatedBalance;
    }

    /**
     * 保留余额
     * @param obligatedBalance 保留余额
     *
     * @mbg.generated
     */
    public void setObligatedBalance(Long obligatedBalance) {
        this.obligatedBalance = obligatedBalance;
    }

    /**
     * 不可代付馀额(T1馀额)
     * @return frozen_t1_balance 不可代付馀额(T1馀额)
     *
     * @mbg.generated
     */
    public Long getFrozenT1Balance() {
        return frozenT1Balance;
    }

    /**
     * 不可代付馀额(T1馀额)
     * @param frozenT1Balance 不可代付馀额(T1馀额)
     *
     * @mbg.generated
     */
    public void setFrozenT1Balance(Long frozenT1Balance) {
        this.frozenT1Balance = frozenT1Balance;
    }

    /**
     * 冻结款
     * @return frozen_balance 冻结款
     *
     * @mbg.generated
     */
    public Long getFrozenBalance() {
        return frozenBalance;
    }

    /**
     * 冻结款
     * @param frozenBalance 冻结款
     *
     * @mbg.generated
     */
    public void setFrozenBalance(Long frozenBalance) {
        this.frozenBalance = frozenBalance;
    }

    /**
     * 状态：0=无效, 1=有效,2=锁定
     * @return acc_state 状态：0=无效, 1=有效,2=锁定
     *
     * @mbg.generated
     */
    public String getAccState() {
        return accState;
    }

    /**
     * 状态：0=无效, 1=有效,2=锁定
     * @param accState 状态：0=无效, 1=有效,2=锁定
     *
     * @mbg.generated
     */
    public void setAccState(String accState) {
        this.accState = accState;
    }

    /**
     * 当日累计交易额(收入)
     * @return dayTxnAmt 当日累计交易额(收入)
     *
     * @mbg.generated
     */
    public Long getDaytxnamt() {
        return daytxnamt;
    }

    /**
     * 当日累计交易额(收入)
     * @param daytxnamt 当日累计交易额(收入)
     *
     * @mbg.generated
     */
    public void setDaytxnamt(Long daytxnamt) {
        this.daytxnamt = daytxnamt;
    }

    /**
     * 当日累计交易手续费
     * @return dayTxnFee 当日累计交易手续费
     *
     * @mbg.generated
     */
    public Long getDaytxnfee() {
        return daytxnfee;
    }

    /**
     * 当日累计交易手续费
     * @param daytxnfee 当日累计交易手续费
     *
     * @mbg.generated
     */
    public void setDaytxnfee(Long daytxnfee) {
        this.daytxnfee = daytxnfee;
    }

    /**
     * 当日累计交易笔数
     * @return dayTxnCount 当日累计交易笔数
     *
     * @mbg.generated
     */
    public Integer getDaytxncount() {
        return daytxncount;
    }

    /**
     * 当日累计交易笔数
     * @param daytxncount 当日累计交易笔数
     *
     * @mbg.generated
     */
    public void setDaytxncount(Integer daytxncount) {
        this.daytxncount = daytxncount;
    }

    /**
     * 当日累计提现金额(支出)
     * @return dayWithdrawAmt 当日累计提现金额(支出)
     *
     * @mbg.generated
     */
    public Long getDaywithdrawamt() {
        return daywithdrawamt;
    }

    /**
     * 当日累计提现金额(支出)
     * @param daywithdrawamt 当日累计提现金额(支出)
     *
     * @mbg.generated
     */
    public void setDaywithdrawamt(Long daywithdrawamt) {
        this.daywithdrawamt = daywithdrawamt;
    }

    /**
     * 当日累计提现手续费
     * @return dayWithdrawFee 当日累计提现手续费
     *
     * @mbg.generated
     */
    public Long getDaywithdrawfee() {
        return daywithdrawfee;
    }

    /**
     * 当日累计提现手续费
     * @param daywithdrawfee 当日累计提现手续费
     *
     * @mbg.generated
     */
    public void setDaywithdrawfee(Long daywithdrawfee) {
        this.daywithdrawfee = daywithdrawfee;
    }

    /**
     * 当日累计提现笔数
     * @return dayWithdrawCount 当日累计提现笔数
     *
     * @mbg.generated
     */
    public Integer getDaywithdrawcount() {
        return daywithdrawcount;
    }

    /**
     * 当日累计提现笔数
     * @param daywithdrawcount 当日累计提现笔数
     *
     * @mbg.generated
     */
    public void setDaywithdrawcount(Integer daywithdrawcount) {
        this.daywithdrawcount = daywithdrawcount;
    }

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        TxnMerAccLimitInfo other = (TxnMerAccLimitInfo) that;
        return (this.getMchntCd() == null ? other.getMchntCd() == null : this.getMchntCd().equals(other.getMchntCd()))
            && (this.getIntTransCd() == null ? other.getIntTransCd() == null : this.getIntTransCd().equals(other.getIntTransCd()))
            && (this.getSettleMode() == null ? other.getSettleMode() == null : this.getSettleMode().equals(other.getSettleMode()))
            && (this.getSettleAlgorithm() == null ? other.getSettleAlgorithm() == null : this.getSettleAlgorithm().equals(other.getSettleAlgorithm()))
            && (this.getTxT0Percent() == null ? other.getTxT0Percent() == null : this.getTxT0Percent().equals(other.getTxT0Percent()))
            && (this.getTxTimeLimit() == null ? other.getTxTimeLimit() == null : this.getTxTimeLimit().equals(other.getTxTimeLimit()))
            && (this.getTxAmtMin() == null ? other.getTxAmtMin() == null : this.getTxAmtMin().equals(other.getTxAmtMin()))
            && (this.getTxAmtMax() == null ? other.getTxAmtMax() == null : this.getTxAmtMax().equals(other.getTxAmtMax()))
            && (this.getTxDayMax() == null ? other.getTxDayMax() == null : this.getTxDayMax().equals(other.getTxDayMax()))
            && (this.getTxCardDayMax() == null ? other.getTxCardDayMax() == null : this.getTxCardDayMax().equals(other.getTxCardDayMax()))
            && (this.getSettlePeriod() == null ? other.getSettlePeriod() == null : this.getSettlePeriod().equals(other.getSettlePeriod()))
            && (this.getAvailableBalance() == null ? other.getAvailableBalance() == null : this.getAvailableBalance().equals(other.getAvailableBalance()))
            && (this.getObligatedBalance() == null ? other.getObligatedBalance() == null : this.getObligatedBalance().equals(other.getObligatedBalance()))
            && (this.getFrozenT1Balance() == null ? other.getFrozenT1Balance() == null : this.getFrozenT1Balance().equals(other.getFrozenT1Balance()))
            && (this.getFrozenBalance() == null ? other.getFrozenBalance() == null : this.getFrozenBalance().equals(other.getFrozenBalance()))
            && (this.getAccState() == null ? other.getAccState() == null : this.getAccState().equals(other.getAccState()))
            && (this.getDaytxnamt() == null ? other.getDaytxnamt() == null : this.getDaytxnamt().equals(other.getDaytxnamt()))
            && (this.getDaytxnfee() == null ? other.getDaytxnfee() == null : this.getDaytxnfee().equals(other.getDaytxnfee()))
            && (this.getDaytxncount() == null ? other.getDaytxncount() == null : this.getDaytxncount().equals(other.getDaytxncount()))
            && (this.getDaywithdrawamt() == null ? other.getDaywithdrawamt() == null : this.getDaywithdrawamt().equals(other.getDaywithdrawamt()))
            && (this.getDaywithdrawfee() == null ? other.getDaywithdrawfee() == null : this.getDaywithdrawfee().equals(other.getDaywithdrawfee()))
            && (this.getDaywithdrawcount() == null ? other.getDaywithdrawcount() == null : this.getDaywithdrawcount().equals(other.getDaywithdrawcount()));
    }

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getMchntCd() == null) ? 0 : getMchntCd().hashCode());
        result = prime * result + ((getIntTransCd() == null) ? 0 : getIntTransCd().hashCode());
        result = prime * result + ((getSettleMode() == null) ? 0 : getSettleMode().hashCode());
        result = prime * result + ((getSettleAlgorithm() == null) ? 0 : getSettleAlgorithm().hashCode());
        result = prime * result + ((getTxT0Percent() == null) ? 0 : getTxT0Percent().hashCode());
        result = prime * result + ((getTxTimeLimit() == null) ? 0 : getTxTimeLimit().hashCode());
        result = prime * result + ((getTxAmtMin() == null) ? 0 : getTxAmtMin().hashCode());
        result = prime * result + ((getTxAmtMax() == null) ? 0 : getTxAmtMax().hashCode());
        result = prime * result + ((getTxDayMax() == null) ? 0 : getTxDayMax().hashCode());
        result = prime * result + ((getTxCardDayMax() == null) ? 0 : getTxCardDayMax().hashCode());
        result = prime * result + ((getSettlePeriod() == null) ? 0 : getSettlePeriod().hashCode());
        result = prime * result + ((getAvailableBalance() == null) ? 0 : getAvailableBalance().hashCode());
        result = prime * result + ((getObligatedBalance() == null) ? 0 : getObligatedBalance().hashCode());
        result = prime * result + ((getFrozenT1Balance() == null) ? 0 : getFrozenT1Balance().hashCode());
        result = prime * result + ((getFrozenBalance() == null) ? 0 : getFrozenBalance().hashCode());
        result = prime * result + ((getAccState() == null) ? 0 : getAccState().hashCode());
        result = prime * result + ((getDaytxnamt() == null) ? 0 : getDaytxnamt().hashCode());
        result = prime * result + ((getDaytxnfee() == null) ? 0 : getDaytxnfee().hashCode());
        result = prime * result + ((getDaytxncount() == null) ? 0 : getDaytxncount().hashCode());
        result = prime * result + ((getDaywithdrawamt() == null) ? 0 : getDaywithdrawamt().hashCode());
        result = prime * result + ((getDaywithdrawfee() == null) ? 0 : getDaywithdrawfee().hashCode());
        result = prime * result + ((getDaywithdrawcount() == null) ? 0 : getDaywithdrawcount().hashCode());
        return result;
    }

    /**
     * Database table : view_txn_mer_acc_limit_info
     *
     * @mbg.generated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash=").append(hashCode());
        sb.append(", mchntCd=").append(mchntCd);
        sb.append(", intTransCd=").append(intTransCd);
        sb.append(", settleMode=").append(settleMode);
        sb.append(", settleAlgorithm=").append(settleAlgorithm);
        sb.append(", txT0Percent=").append(txT0Percent);
        sb.append(", txTimeLimit=").append(txTimeLimit);
        sb.append(", txAmtMin=").append(txAmtMin);
        sb.append(", txAmtMax=").append(txAmtMax);
        sb.append(", txDayMax=").append(txDayMax);
        sb.append(", txCardDayMax=").append(txCardDayMax);
        sb.append(", settlePeriod=").append(settlePeriod);
        sb.append(", availableBalance=").append(availableBalance);
        sb.append(", obligatedBalance=").append(obligatedBalance);
        sb.append(", frozenT1Balance=").append(frozenT1Balance);
        sb.append(", frozenBalance=").append(frozenBalance);
        sb.append(", accState=").append(accState);
        sb.append(", daytxnamt=").append(daytxnamt);
        sb.append(", daytxnfee=").append(daytxnfee);
        sb.append(", daytxncount=").append(daytxncount);
        sb.append(", daywithdrawamt=").append(daywithdrawamt);
        sb.append(", daywithdrawfee=").append(daywithdrawfee);
        sb.append(", daywithdrawcount=").append(daywithdrawcount);
        sb.append("]");
        return sb.toString();
    }

    /**
     * Copy properties value from source.
     * @param source The instance that clone from.
     *
     * @mbg.generated
     */
    public void cloneFrom(TxnMerAccLimitInfo source) {
        this.mchntCd=source.mchntCd;
        this.intTransCd=source.intTransCd;
        this.settleMode=source.settleMode;
        this.settleAlgorithm=source.settleAlgorithm;
        this.txT0Percent=source.txT0Percent;
        this.txTimeLimit=source.txTimeLimit;
        this.txAmtMin=source.txAmtMin;
        this.txAmtMax=source.txAmtMax;
        this.txDayMax=source.txDayMax;
        this.txCardDayMax=source.txCardDayMax;
        this.settlePeriod=source.settlePeriod;
        this.availableBalance=source.availableBalance;
        this.obligatedBalance=source.obligatedBalance;
        this.frozenT1Balance=source.frozenT1Balance;
        this.frozenBalance=source.frozenBalance;
        this.accState=source.accState;
        this.daytxnamt=source.daytxnamt;
        this.daytxnfee=source.daytxnfee;
        this.daytxncount=source.daytxncount;
        this.daywithdrawamt=source.daywithdrawamt;
        this.daywithdrawfee=source.daywithdrawfee;
        this.daywithdrawcount=source.daywithdrawcount;
    }
}