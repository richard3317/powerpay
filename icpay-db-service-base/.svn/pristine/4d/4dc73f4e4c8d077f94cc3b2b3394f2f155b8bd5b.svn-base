package com.icpay.payment.db.dao.mybatis.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

/**
 * [Model class] 
 *
 * This class was generated by MyBatis Generator.
 * Database table : tbl_balance_transfer_log

 *
 * @mbg.generated
 */
public class BalanceTransferLog extends BalanceTransferLogKey implements Serializable {
    /**
     * D0结转金额(单位：分)
     * Database column : tbl_balance_transfer_log.d0_transfer_at
     *
     * @mbg.generated
     */
    private Long d0TransferAt;

    /**
     * 金額表示單位 = 0.01
     * Database column : tbl_balance_transfer_log.unit
     *
     * @mbg.generated
     */
    private BigDecimal unit;

    /**
     * D0结转执行时间
     * Database column : tbl_balance_transfer_log.d0_task_time
     *
     * @mbg.generated
     */
    private Date d0TaskTime;

    /**
     * D0结转结果：1：成功，2：失败
     * Database column : tbl_balance_transfer_log.d0_result
     *
     * @mbg.generated
     */
    private String d0Result;

    /**
     * Database column : tbl_balance_transfer_log.d0_comments
     *
     * @mbg.generated
     */
    private String d0Comments;

    /**
     * D0结转帐户操作类型; 请参考：Constant.OPERTYPE
     * Database column : tbl_balance_transfer_log.d0_operate_tp
     *
     * @mbg.generated
     */
    private String d0OperateTp;

    /**
     *  T1结转金额(单位：分)
     * Database column : tbl_balance_transfer_log.t1_transfer_at
     *
     * @mbg.generated
     */
    private Long t1TransferAt;

    /**
     *  T1结转执行时间
     * Database column : tbl_balance_transfer_log.t1_task_time
     *
     * @mbg.generated
     */
    private Date t1TaskTime;

    /**
     *  T1结转结果：1：成功，2：失败，3：不需结转，9: 尚有二次T1結轉
     * Database column : tbl_balance_transfer_log.t1_result
     *
     * @mbg.generated
     */
    private String t1Result;

    /**
     * Database column : tbl_balance_transfer_log.t1_comments
     *
     * @mbg.generated
     */
    private String t1Comments;

    /**
     * T1结转帐户操作类型; 请参考：Constant.OPERTYPE
     * Database column : tbl_balance_transfer_log.t1_operate_tp
     *
     * @mbg.generated
     */
    private String t1OperateTp;

    /**
     * Database column : tbl_balance_transfer_log.rec_crt_ts
     *
     * @mbg.generated
     */
    private Date recCrtTs;

    /**
     * Database column : tbl_balance_transfer_log.rec_upd_ts
     *
     * @mbg.generated
     */
    private Date recUpdTs;

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    private static final long serialVersionUID = 1L;

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    public BalanceTransferLog(String transferDt, String transChnl, String mchntCd, String currCd, Long d0TransferAt, BigDecimal unit, Date d0TaskTime, String d0Result, String d0Comments, String d0OperateTp, Long t1TransferAt, Date t1TaskTime, String t1Result, String t1Comments, String t1OperateTp, Date recCrtTs, Date recUpdTs) {
        super(transferDt, transChnl, mchntCd, currCd);
        this.d0TransferAt = d0TransferAt;
        this.unit = unit;
        this.d0TaskTime = d0TaskTime;
        this.d0Result = d0Result;
        this.d0Comments = d0Comments;
        this.d0OperateTp = d0OperateTp;
        this.t1TransferAt = t1TransferAt;
        this.t1TaskTime = t1TaskTime;
        this.t1Result = t1Result;
        this.t1Comments = t1Comments;
        this.t1OperateTp = t1OperateTp;
        this.recCrtTs = recCrtTs;
        this.recUpdTs = recUpdTs;
    }

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    public BalanceTransferLog() {
        super();
    }

    /**
     * D0结转金额(单位：分)
     * @return d0_transfer_at D0结转金额(单位：分)
     *
     * @mbg.generated
     */
    public Long getD0TransferAt() {
        return d0TransferAt;
    }

    /**
     * D0结转金额(单位：分)
     * @param d0TransferAt D0结转金额(单位：分)
     *
     * @mbg.generated
     */
    public void setD0TransferAt(Long d0TransferAt) {
        this.d0TransferAt = d0TransferAt;
    }

    /**
     * 金額表示單位 = 0.01
     * @return unit 金額表示單位 = 0.01
     *
     * @mbg.generated
     */
    public BigDecimal getUnit() {
        return unit;
    }

    /**
     * 金額表示單位 = 0.01
     * @param unit 金額表示單位 = 0.01
     *
     * @mbg.generated
     */
    public void setUnit(BigDecimal unit) {
        this.unit = unit;
    }

    /**
     * D0结转执行时间
     * @return d0_task_time D0结转执行时间
     *
     * @mbg.generated
     */
    public Date getD0TaskTime() {
        return d0TaskTime;
    }

    /**
     * D0结转执行时间
     * @param d0TaskTime D0结转执行时间
     *
     * @mbg.generated
     */
    public void setD0TaskTime(Date d0TaskTime) {
        this.d0TaskTime = d0TaskTime;
    }

    /**
     * D0结转结果：1：成功，2：失败
     * @return d0_result D0结转结果：1：成功，2：失败
     *
     * @mbg.generated
     */
    public String getD0Result() {
        return d0Result;
    }

    /**
     * D0结转结果：1：成功，2：失败
     * @param d0Result D0结转结果：1：成功，2：失败
     *
     * @mbg.generated
     */
    public void setD0Result(String d0Result) {
        this.d0Result = d0Result;
    }

    /**
     * @return d0_comments 
     *
     * @mbg.generated
     */
    public String getD0Comments() {
        return d0Comments;
    }

    /**
     * @param d0Comments 
     *
     * @mbg.generated
     */
    public void setD0Comments(String d0Comments) {
        this.d0Comments = d0Comments;
    }

    /**
     * D0结转帐户操作类型; 请参考：Constant.OPERTYPE
     * @return d0_operate_tp D0结转帐户操作类型; 请参考：Constant.OPERTYPE
     *
     * @mbg.generated
     */
    public String getD0OperateTp() {
        return d0OperateTp;
    }

    /**
     * D0结转帐户操作类型; 请参考：Constant.OPERTYPE
     * @param d0OperateTp D0结转帐户操作类型; 请参考：Constant.OPERTYPE
     *
     * @mbg.generated
     */
    public void setD0OperateTp(String d0OperateTp) {
        this.d0OperateTp = d0OperateTp;
    }

    /**
     *  T1结转金额(单位：分)
     * @return t1_transfer_at  T1结转金额(单位：分)
     *
     * @mbg.generated
     */
    public Long getT1TransferAt() {
        return t1TransferAt;
    }

    /**
     *  T1结转金额(单位：分)
     * @param t1TransferAt  T1结转金额(单位：分)
     *
     * @mbg.generated
     */
    public void setT1TransferAt(Long t1TransferAt) {
        this.t1TransferAt = t1TransferAt;
    }

    /**
     *  T1结转执行时间
     * @return t1_task_time  T1结转执行时间
     *
     * @mbg.generated
     */
    public Date getT1TaskTime() {
        return t1TaskTime;
    }

    /**
     *  T1结转执行时间
     * @param t1TaskTime  T1结转执行时间
     *
     * @mbg.generated
     */
    public void setT1TaskTime(Date t1TaskTime) {
        this.t1TaskTime = t1TaskTime;
    }

    /**
     *  T1结转结果：1：成功，2：失败，3：不需结转，9: 尚有二次T1結轉
     * @return t1_result  T1结转结果：1：成功，2：失败，3：不需结转，9: 尚有二次T1結轉
     *
     * @mbg.generated
     */
    public String getT1Result() {
        return t1Result;
    }

    /**
     *  T1结转结果：1：成功，2：失败，3：不需结转，9: 尚有二次T1結轉
     * @param t1Result  T1结转结果：1：成功，2：失败，3：不需结转，9: 尚有二次T1結轉
     *
     * @mbg.generated
     */
    public void setT1Result(String t1Result) {
        this.t1Result = t1Result;
    }

    /**
     * @return t1_comments 
     *
     * @mbg.generated
     */
    public String getT1Comments() {
        return t1Comments;
    }

    /**
     * @param t1Comments 
     *
     * @mbg.generated
     */
    public void setT1Comments(String t1Comments) {
        this.t1Comments = t1Comments;
    }

    /**
     * T1结转帐户操作类型; 请参考：Constant.OPERTYPE
     * @return t1_operate_tp T1结转帐户操作类型; 请参考：Constant.OPERTYPE
     *
     * @mbg.generated
     */
    public String getT1OperateTp() {
        return t1OperateTp;
    }

    /**
     * T1结转帐户操作类型; 请参考：Constant.OPERTYPE
     * @param t1OperateTp T1结转帐户操作类型; 请参考：Constant.OPERTYPE
     *
     * @mbg.generated
     */
    public void setT1OperateTp(String t1OperateTp) {
        this.t1OperateTp = t1OperateTp;
    }

    /**
     * @return rec_crt_ts 
     *
     * @mbg.generated
     */
    public Date getRecCrtTs() {
        return recCrtTs;
    }

    /**
     * @param recCrtTs 
     *
     * @mbg.generated
     */
    public void setRecCrtTs(Date recCrtTs) {
        this.recCrtTs = recCrtTs;
    }

    /**
     * @return rec_upd_ts 
     *
     * @mbg.generated
     */
    public Date getRecUpdTs() {
        return recUpdTs;
    }

    /**
     * @param recUpdTs 
     *
     * @mbg.generated
     */
    public void setRecUpdTs(Date recUpdTs) {
        this.recUpdTs = recUpdTs;
    }

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        BalanceTransferLog other = (BalanceTransferLog) that;
        return (this.getTransferDt() == null ? other.getTransferDt() == null : this.getTransferDt().equals(other.getTransferDt()))
            && (this.getTransChnl() == null ? other.getTransChnl() == null : this.getTransChnl().equals(other.getTransChnl()))
            && (this.getMchntCd() == null ? other.getMchntCd() == null : this.getMchntCd().equals(other.getMchntCd()))
            && (this.getCurrCd() == null ? other.getCurrCd() == null : this.getCurrCd().equals(other.getCurrCd()))
            && (this.getD0TransferAt() == null ? other.getD0TransferAt() == null : this.getD0TransferAt().equals(other.getD0TransferAt()))
            && (this.getUnit() == null ? other.getUnit() == null : this.getUnit().equals(other.getUnit()))
            && (this.getD0TaskTime() == null ? other.getD0TaskTime() == null : this.getD0TaskTime().equals(other.getD0TaskTime()))
            && (this.getD0Result() == null ? other.getD0Result() == null : this.getD0Result().equals(other.getD0Result()))
            && (this.getD0Comments() == null ? other.getD0Comments() == null : this.getD0Comments().equals(other.getD0Comments()))
            && (this.getD0OperateTp() == null ? other.getD0OperateTp() == null : this.getD0OperateTp().equals(other.getD0OperateTp()))
            && (this.getT1TransferAt() == null ? other.getT1TransferAt() == null : this.getT1TransferAt().equals(other.getT1TransferAt()))
            && (this.getT1TaskTime() == null ? other.getT1TaskTime() == null : this.getT1TaskTime().equals(other.getT1TaskTime()))
            && (this.getT1Result() == null ? other.getT1Result() == null : this.getT1Result().equals(other.getT1Result()))
            && (this.getT1Comments() == null ? other.getT1Comments() == null : this.getT1Comments().equals(other.getT1Comments()))
            && (this.getT1OperateTp() == null ? other.getT1OperateTp() == null : this.getT1OperateTp().equals(other.getT1OperateTp()))
            && (this.getRecCrtTs() == null ? other.getRecCrtTs() == null : this.getRecCrtTs().equals(other.getRecCrtTs()))
            && (this.getRecUpdTs() == null ? other.getRecUpdTs() == null : this.getRecUpdTs().equals(other.getRecUpdTs()));
    }

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getTransferDt() == null) ? 0 : getTransferDt().hashCode());
        result = prime * result + ((getTransChnl() == null) ? 0 : getTransChnl().hashCode());
        result = prime * result + ((getMchntCd() == null) ? 0 : getMchntCd().hashCode());
        result = prime * result + ((getCurrCd() == null) ? 0 : getCurrCd().hashCode());
        result = prime * result + ((getD0TransferAt() == null) ? 0 : getD0TransferAt().hashCode());
        result = prime * result + ((getUnit() == null) ? 0 : getUnit().hashCode());
        result = prime * result + ((getD0TaskTime() == null) ? 0 : getD0TaskTime().hashCode());
        result = prime * result + ((getD0Result() == null) ? 0 : getD0Result().hashCode());
        result = prime * result + ((getD0Comments() == null) ? 0 : getD0Comments().hashCode());
        result = prime * result + ((getD0OperateTp() == null) ? 0 : getD0OperateTp().hashCode());
        result = prime * result + ((getT1TransferAt() == null) ? 0 : getT1TransferAt().hashCode());
        result = prime * result + ((getT1TaskTime() == null) ? 0 : getT1TaskTime().hashCode());
        result = prime * result + ((getT1Result() == null) ? 0 : getT1Result().hashCode());
        result = prime * result + ((getT1Comments() == null) ? 0 : getT1Comments().hashCode());
        result = prime * result + ((getT1OperateTp() == null) ? 0 : getT1OperateTp().hashCode());
        result = prime * result + ((getRecCrtTs() == null) ? 0 : getRecCrtTs().hashCode());
        result = prime * result + ((getRecUpdTs() == null) ? 0 : getRecUpdTs().hashCode());
        return result;
    }

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash=").append(hashCode());
        sb.append(getSuperToString());
        sb.append(", d0TransferAt=").append(d0TransferAt);
        sb.append(", unit=").append(unit);
        sb.append(", d0TaskTime=").append(d0TaskTime);
        sb.append(", d0Result=").append(d0Result);
        sb.append(", d0Comments=").append(d0Comments);
        sb.append(", d0OperateTp=").append(d0OperateTp);
        sb.append(", t1TransferAt=").append(t1TransferAt);
        sb.append(", t1TaskTime=").append(t1TaskTime);
        sb.append(", t1Result=").append(t1Result);
        sb.append(", t1Comments=").append(t1Comments);
        sb.append(", t1OperateTp=").append(t1OperateTp);
        sb.append(", recCrtTs=").append(recCrtTs);
        sb.append(", recUpdTs=").append(recUpdTs);
        sb.append("]");
        return sb.toString();
    }

    /**
     * Database table : tbl_balance_transfer_log
     *
     * @mbg.generated
     */
    private String getSuperToString() {
        String s = super.toString();
        String superCls = super.getClass().getSimpleName();
        if (!(s.contains("[Hash=") && s.contains(superCls))) return "";
        int end=-1;
        int start = s.indexOf("[Hash=");
        if (start>=0) {
            	start = s.indexOf(", ", start);
            	if (start>=0) {
                		end = s.lastIndexOf(']');
                		if (end>0) 
                			return ", "+s.substring(start+2, end)+"";
                	}
            }
            return "";
        }

    /**
     * Copy properties value from source.
     * @param source The instance that clone from.
     *
     * @mbg.generated
     */
    public void cloneFrom(BalanceTransferLog source) {
        super.cloneFrom(source);
        this.d0TransferAt=source.d0TransferAt;
        this.unit=source.unit;
        this.d0TaskTime=source.d0TaskTime;
        this.d0Result=source.d0Result;
        this.d0Comments=source.d0Comments;
        this.d0OperateTp=source.d0OperateTp;
        this.t1TransferAt=source.t1TransferAt;
        this.t1TaskTime=source.t1TaskTime;
        this.t1Result=source.t1Result;
        this.t1Comments=source.t1Comments;
        this.t1OperateTp=source.t1OperateTp;
        this.recCrtTs=source.recCrtTs;
        this.recUpdTs=source.recUpdTs;
    }
}